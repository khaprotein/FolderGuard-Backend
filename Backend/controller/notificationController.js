
const notificationService = require("../service/notificationService")
const User = require("../model/userModel");
const { getIo,getOnlineUsers} = require("../lib/socket"); // Import Socket.IO

// üìå L·∫•y t·∫•t c·∫£ th√¥ng b√°o
const getAllNotification = async (req, res) => {
    try {
        const list = await notificationService.getAllNotification();
        res.status(200).json({list});
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y th√¥ng b√°o:", error);
        res.status(500).json({ error: "L·ªói server khi l·∫•y th√¥ng b√°o" });
    }
};

// üìå L·∫•y th√¥ng b√°o theo User ID
const getAllByUserId = async (req, res) => {
    try {
        const { userId } = req.params;
        const list = await notificationService.getAllByUserId(userId);

        res.status(200).json({list});
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y th√¥ng b√°o theo User ID:", error);
        res.status(500).json({ error: "L·ªói server khi l·∫•y th√¥ng b√°o" });
    }
};

// üìå L·∫•y th√¥ng b√°o theo ID
const getById = async (req, res) => {
    try {
        const { notificationId } = req.params;
        const noti = await notificationService.getById(notificationId);

        res.status(200).json({noti});

    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y th√¥ng b√°o theo ID:", error);
        res.status(500).json({ error: "L·ªói server khi l·∫•y th√¥ng b√°o" });
    }
};

// üìå T·∫°o th√¥ng b√°o
const createNotification = async (req, res) => {
    try {
        const notification = await notificationService.createNotification(req.body)
           
        // üî• Ki·ªÉm tra xem user c√≥ online kh√¥ng
        const socketId = onlineUsers.get(user_id);
        if (socketId) {
            io.to(socketId).emit("new_notification", { message });
        }

        res.status(201).json({ message: "T·∫°o th∆∞ m·ª•c th√†nh c√¥ng.", notification });
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫°o th√¥ng b√°o:", error);
        res.status(500).json({ error: "L·ªói server khi t·∫°o th√¥ng b√°o" });
    }
};

// üìå C·∫≠p nh·∫≠t tr·∫°ng th√°i th√¥ng b√°o (ƒë·ªçc/ch∆∞a ƒë·ªçc)
const updateNotification = async (req, res) => {
    try {
        const { notification_id, status } = req.body;
        console.log("data:",notification_id, status)
        const noti = await notificationService.updateNotification(req.body);

        res.json({ message: "C·∫≠p nh·∫≠t th√¥ng b√°o th√†nh c√¥ng" ,noti});
    } catch (error) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t th√¥ng b√°o:", error);
        res.status(500).json({ error: "L·ªói server khi c·∫≠p nh·∫≠t th√¥ng b√°o" });
    }
};


const countUnreadNotifications = async (req, res) => {
    try {
        const { userId} = req.params;
        if (!userId) {
            return res.status(400).json({ error: "Thi·∫øu userId trong request" });
        }
        const count = await notificationService.countUnreadNotifications(userId)
        res.json({ count});
    } catch (error) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t th√¥ng b√°o:", error);
        res.status(500).json({ error: "L·ªói server khi c·∫≠p nh·∫≠t th√¥ng b√°o" });
    }
};

module.exports = {
    getAllNotification,
    getAllByUserId,
    getById,
    createNotification,
    updateNotification,
    countUnreadNotifications
    
};
